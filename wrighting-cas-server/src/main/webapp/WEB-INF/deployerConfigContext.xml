<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to Jasig under one or more contributor license agreements. 
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership. Jasig licenses this file to you under the 
	Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at the 
	following location: http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<!-- | deployerConfigContext.xml centralizes into one file some of the declarative 
	configuration that | all CAS deployers will need to modify. | | This file 
	declares some of the Spring-managed JavaBeans that make up a CAS deployment. 
	| The beans declared in this file are instantiated at context initialization 
	time by the Spring | ContextLoaderListener declared in web.xml. It finds 
	this file because this | file is among those declared in the context parameter 
	"contextConfigLocation". | | By far the most common change you will need 
	to make in this file is to change the last bean | declaration to replace 
	the default authentication handler with | one implementing your approach 
	for authenticating usernames and passwords. + -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- | The authentication manager defines security policy for authentication 
		by specifying at a minimum | the authentication handlers that will be used 
		to authenticate credential. While the AuthenticationManager | interface supports 
		plugging in another implementation, the default PolicyBasedAuthenticationManager 
		should | be sufficient in most cases. + -->
	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
		<constructor-arg>
			<map>
				<!-- | IMPORTANT | Every handler requires a unique name. | If more than 
					one instance of the same handler class is configured, you must explicitly 
					| set its name to something other than its default name (typically the simple 
					class name). -->
				<entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
				<entry key-ref="ldapAuthenticationHandler">
					<null />
				</entry>
			</map>
		</constructor-arg>

		<!-- Uncomment the metadata populator to allow clearpass to capture and 
			cache the password This switch effectively will turn on clearpass. -->
		<property name="authenticationMetaDataPopulators">
			<util:list>
				<bean
					class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator"
					c:credentialCache-ref="encryptedMap" />
			</util:list>
		</property>


		<!-- | Defines the security policy around authentication. Some alternative 
			policies that ship with CAS: | | * NotPreventedAuthenticationPolicy - all 
			credential must either pass or fail authentication | * AllAuthenticationPolicy 
			- all presented credential must be authenticated successfully | * RequiredHandlerAuthenticationPolicy 
			- specifies a handler that must authenticate its credential to pass -->
		<property name="authenticationPolicy">
			<bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
		</property>
	</bean>

	<!-- Required for proxy ticket mechanism. -->
	<bean id="proxyAuthenticationHandler"
		class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
		p:httpClient-ref="httpClient" />

	<!-- Required for proxy ticket mechanism -->
	<bean id="proxyPrincipalResolver"
		class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

	<bean id="defltPasswordEncoder"
		class="org.jasig.cas.authentication.handler.PlainTextPasswordEncoder">
		<!-- <constructor-arg index="0"> <value>MD5</value> </constructor-arg> -->
	</bean>

	<!-- | Provides the default username attribute to use to the rest of the 
		DAOs + -->
	<bean id="usernameAttributeProvider"
		class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider">
		<property name="usernameAttribute" value="${ldap.auth.field}" />
	</bean>

	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation 
		would probably want to replace this with the JPA-backed ServiceRegistry DAO 
		The name of this bean should remain "serviceRegistryDao". + -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
		p:registeredServices-ref="registeredServicesList" />

	<util:list id="registeredServicesList">
		<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="0"
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
			p:serviceId="^(https?|imaps?)://alfresco.*" p:evaluationOrder="10000001">
			<property name="usernameAttribute" value="uid"/>
		</bean>
		<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="1"
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
			p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000010">
			<property name="allowedAttributes">
				<list>
					<value>casId</value>
					<value>familyName</value>
					<value>givenName</value>
					<value>personalTitle</value>
					<value>mail</value>
					<value>affiliation</value>
					<value>website</value>
					<value>memberOf</value>
				</list>
			</property>
			<property name="allowedToProxy" value="true" />
		</bean>
		<!-- Use the following definition instead of the above to further restrict 
			access to services within your domain (including sub domains). Note that 
			example.com must be replaced with the domain you wish to permit. This example 
			also demonstrates the configuration of an attribute filter that only allows 
			for attributes whose length is 3. -->
		<!-- <bean class="org.jasig.cas.services.RegexRegisteredService"> <property 
			name="id" value="1" /> <property name="name" value="HTTP and IMAP on example.com" 
			/> <property name="description" value="Allows HTTP(S) and IMAP(S) protocols 
			on example.com" /> <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" 
			/> <property name="evaluationOrder" value="0" /> <property name="attributeFilter"> 
			<bean class="org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter" 
			c:regex="^\w{3}$" /> </property> </bean> -->
	</util:list>

	<bean id="auditTrailManager"
		class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor"
		p:monitors-ref="monitorsList" />

	<util:list id="monitorsList">
		<bean class="org.jasig.cas.monitor.MemoryMonitor"
			p:freeMemoryWarnThreshold="10" />
		<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
			* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
		<bean class="org.jasig.cas.monitor.SessionMonitor"
			p:ticketRegistry-ref="ticketRegistry"
			p:serviceTicketCountWarnThreshold="5000" p:sessionCountWarnThreshold="100000" />
	</util:list>

	<bean id="clearPassProxyList" class="org.jasig.cas.client.validation.ProxyList">
		<constructor-arg>
			<list>
				<value>${server.name}/pwm/proxyCallback</value>
			</list>
		</constructor-arg>
	</bean>

	<!-- CAS 4 authenticated search -->

	<!-- This could be done with direct bind http://jasig.github.io/cas/installation/LDAP-Authentication.html -->
	<bean id="ldapAuthenticationHandler"
		class="org.jasig.cas.authentication.LdapAuthenticationHandler"
		p:principalIdAttribute="${ldap.auth.field}" c:authenticator-ref="authenticator">
		<property name="principalAttributeMap">
			<map>
				<entry value="casId" key="cn" />
				<entry value="familyName" key="sn" />
				<entry value="givenName" key="givenName" />
				<entry value="personalTitle" key="personalTitle" />
				<entry value="mail" key="mail" />
				<entry value="affiliation" key="o" />
				<entry value="website" key="labeledURI" />
				<entry value="memberOf" key="memberOf" />
				<entry value="uid" key="uid" />
			</map>
		</property>
	</bean>
 
    <context:annotation-config/>
    <!-- 
 	<bean id="ldapAuthenticationHandler"
		class="org.jasig.cas.authentication.LdapAuthenticationHandler"
		p:principalIdAttribute="${ldap.auth.field}" c:authenticator-ref="authenticator">
		<property name="principalAttributeMap">
			<map>
				<entry value="familyName" key="sn" />
				<entry value="givenName" key="givenName" />
				<entry value="affiliation" key="o" />
				<entry value="website" key="labeledURI" />
				<entry value="memberOf" key="memberOf" />
			</map>
		</property>
	</bean>
	-->
	<bean id="authenticator" class="org.ldaptive.auth.Authenticator"
		c:resolver-ref="dnResolver" c:handler-ref="authHandler" />

	<bean id="dnResolver" class="org.ldaptive.auth.PooledSearchDnResolver"
		p:baseDn="${ldap.authn.baseDn}" p:allowMultipleDns="false"
		p:connectionFactory-ref="searchPooledLdapConnectionFactory"
		p:userFilter="${ldap.authn.searchFilter}" />

	<bean id="entryResolver" class="org.ldaptive.auth.PooledSearchEntryResolver"
		p:connectionFactory-ref="searchPooledLdapConnectionFactory" />

	<bean id="searchPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
		p:connectionPool-ref="searchConnectionPool" />

	<bean id="searchConnectionPool" parent="abstractConnectionPool"
		p:connectionFactory-ref="searchConnectionFactory" />

	<bean id="searchConnectionFactory" class="org.ldaptive.DefaultConnectionFactory"
		p:connectionConfig-ref="searchConnectionConfig" />

	<bean id="searchConnectionConfig" parent="abstractConnectionConfig"
		p:connectionInitializer-ref="bindConnectionInitializer" />

	<bean id="bindConnectionInitializer" class="org.ldaptive.BindConnectionInitializer"
		p:bindDn="${ldap.authn.managerDN}">
		<property name="bindCredential">
			<bean class="org.ldaptive.Credential" c:password="${ldap.authn.managerPassword}" />
		</property>
	</bean>

	<bean id="abstractConnectionPool" abstract="true"
		class="org.ldaptive.pool.BlockingConnectionPool" init-method="initialize"
		p:poolConfig-ref="ldapPoolConfig" p:blockWaitTime="${ldap.pool.blockWaitTime}"
		p:validator-ref="searchValidator" p:pruneStrategy-ref="pruneStrategy" />

	<bean id="abstractConnectionConfig" abstract="true"
		class="org.ldaptive.ConnectionConfig" p:ldapUrl="${ldap.url}"
		p:connectTimeout="${ldap.connectTimeout}" p:useStartTLS="${ldap.useStartTLS}" />

	<bean id="ldapPoolConfig" class="org.ldaptive.pool.PoolConfig"
		p:minPoolSize="${ldap.pool.minSize}" p:maxPoolSize="${ldap.pool.maxSize}"
		p:validateOnCheckOut="${ldap.pool.validateOnCheckout}"
		p:validatePeriodically="${ldap.pool.validatePeriodically}"
		p:validatePeriod="${ldap.pool.validatePeriod}" />

	<bean id="pruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy"
		p:prunePeriod="${ldap.pool.prunePeriod}" p:idleTime="${ldap.pool.idleTime}" />

	<bean id="searchValidator" class="org.ldaptive.pool.SearchValidator" />

	<bean id="authHandler" class="org.ldaptive.auth.PooledBindAuthenticationHandler"
		p:connectionFactory-ref="bindPooledLdapConnectionFactory" />

	<bean id="bindPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
		p:connectionPool-ref="bindConnectionPool" />

	<bean id="bindConnectionPool" parent="abstractConnectionPool"
		p:connectionFactory-ref="bindConnectionFactory" />

	<bean id="bindConnectionFactory" class="org.ldaptive.DefaultConnectionFactory"
		p:connectionConfig-ref="bindConnectionConfig" />

	<bean id="bindConnectionConfig" parent="abstractConnectionConfig" />

	<bean id="searchExecutor" class="org.ldaptive.SearchExecutor" />
</beans>
